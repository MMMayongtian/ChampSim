#include "cache.h"
#include "ghb_stride.h"

#include <stdio.h>

GHB* ghb;

void CACHE::l2c_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L2C ghb PC/CS prefetcher" << endl;
    ghb = new GHB();
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    ghb->setEntry(addr,ip);

    bool ret = ghb->missCheck();

    if(ret){
        ret = ghb->strideCheck();

        if(ret){
            uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
            uint64_t stride = ghb->getStride();
            for (int i = look_head; i <= look_head + degree; i++){
                uint64_t pf_addr = (cl_addr + i * stride) << LOG2_BLOCK_SIZE;
                prefetch_line(ip, addr, pf_addr, FILL_L2, 0);
            }
        }
    }

    ghb->updateIndex();

    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
   cout << "CPU " << cpu << " L2C ghb PC/CS prefetcherfinal stats" << endl;
}